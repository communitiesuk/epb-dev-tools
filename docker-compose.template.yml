x-api-app: &api-app
  environment:
    DATABASE_URL: postgresql://epb:superSecret30CharacterPassword@epb-register-api-db/epb
    EPB_UNLEASH_URI: http://epb-feature-flag/api
    EPB_DATA_WAREHOUSE_QUEUES_URI: redis://epb-data-warehouse-queues
    EPB_AUTH_CLIENT_ID: bcef78ba-8e31-4639-8dc7-0754d1f67db8
    EPB_AUTH_CLIENT_SECRET: register-api-secret
    EPB_AUTH_SERVER: http://epb-auth-server/auth
    EPB_ADDRESSING_URL: http://epb-addressing
    JWT_ISSUER: epb-auth-server
    JWT_SECRET: test-jwt-secret
    STAGE: development
    VALID_DOMESTIC_SCHEMAS: SAP-Schema-19.1.0,SAP-Schema-19.0.0,SAP-Schema-18.0.0,SAP-Schema-NI-18.0.0,RdSAP-Schema-20.0.0,RdSAP-Schema-NI-20.0.0
    VALID_NON_DOMESTIC_SCHEMAS: CEPC-8.0.0,CEPC-NI-8.0.0
  links:
    - epb-feature-flag
    - epb-register-api-db
    - epb-data-warehouse-queues
    - epb-addressing
  volumes:
    - ${EPB_REGISTER_API_PATH}:/app

services:
  epb-proxy:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/nginxReverseProxy.Dockerfile
    links:
      - epb-auth-server
      - epb-register-api
      - epb-frontend
      - epb-feature-flag
      - epb-data-frontend
    ports:
      - "80:80"
    volumes:
      - ${PWD}/http_files:/var/www/http_files

  epb-frontend:
    build:
      context: ${EPB_FRONTEND_PATH}
      dockerfile: ${PWD}/sinatra.Dockerfile
    environment:
      EPB_API_URL: http://epb-register-api
      EPB_DATA_WAREHOUSE_API_URL: http://epb-data-warehouse-api
      EPB_AUTH_CLIENT_ID: 6f61579e-e829-47d7-aef5-7d36ad068bee
      EPB_AUTH_CLIENT_SECRET: test-client-secret
      EPB_AUTH_SERVER: http://epb-auth-server/auth
      EPB_UNLEASH_URI: http://epb-feature-flag/api
      JWT_ISSUER: epb-auth-server
      JWT_SECRET: test-jwt-secret
      STAGE: development
    links:
      - epb-auth-server
      - epb-feature-flag
      - epb-register-api
    volumes:
      - ${EPB_FRONTEND_PATH}:/app

  epb-data-frontend:
    build:
      context: ${EPB_DATA_FRONTEND_PATH}
      dockerfile: ${PWD}/sinatra.Dockerfile
    env_file:
      - .env.keys
    environment:
      EPB_API_URL: http://epb-register-api
      EPB_DATA_WAREHOUSE_API_URL: http://epb-data-warehouse-api
      EPB_AUTH_CLIENT_ID: 6f61579e-e829-47d7-aef5-7d36ad068bee
      EPB_AUTH_CLIENT_SECRET: test-client-secret
      EPB_AUTH_SERVER: http://epb-auth-server/auth
      EPB_UNLEASH_URI: http://epb-feature-flag/api
      STAGE: development
      ONELOGIN_CLIENT_ID: datafrontendclientid
      ONELOGIN_HOST_URL: http://one-login-simulator:3000
      APP_ENV: development
      EPB_DATA_USER_CREDENTIAL_TABLE_NAME: user_credentials
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_ENDPOINT_URL_DYNAMODB: http://dynamodb-local:8000

    links:
      - epb-auth-server
      - epb-feature-flag
      - epb-register-api
      - epb-data-warehouse-api
      - one-login-simulator
    volumes:
      - ${EPB_DATA_FRONTEND_PATH}:/app

  epb-auth-server:
    build:
      context: ${EPB_AUTH_SERVER_PATH}
      dockerfile: ${PWD}/sinatra.Dockerfile
    environment:
      DATABASE_URL: postgresql://epb:superSecret30CharacterPassword@epb-auth-server-db/epb
      JWT_ISSUER: epb-auth-server
      JWT_SECRET: test-jwt-secret
      URL_PREFIX: /auth
      EPB_UNLEASH_URI: http://epb-feature-flag/api
      RACK_ENV: development
      STAGE: development
    links:
      - epb-auth-server-db
      - epb-feature-flag
    volumes:
      - ${EPB_AUTH_SERVER_PATH}:/app

  epb-auth-server-db:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/epbDatabase.Dockerfile
    environment:
      POSTGRES_PASSWORD: superSecret30CharacterPassword
      POSTGRES_USER: epb
    volumes:
      - auth-server:/var/lib/postgresql@$POSTGRES_VERSION/data

  epb-register-api:
    <<: *api-app
    build:
      context: ${EPB_REGISTER_API_PATH}
      dockerfile: ${PWD}/sinatra.Dockerfile

  epb-register-api-db:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/epbDatabase.Dockerfile
    environment:
      POSTGRES_PASSWORD: superSecret30CharacterPassword
      POSTGRES_USER: epb
    volumes:
      - register-api:/var/lib/postgresql@$POSTGRES_VERSION/data

  epb-data-warehouse-queues:
    image: redis

  epb-feature-flag:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/unleash.Dockerfile
    environment:
      DATABASE_URL: postgresql://unleashed:superSecret30CharacterPassword@epb-feature-flag-db/unleashed
      DATABASE_SSL: "false"
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 80
    links:
      - epb-feature-flag-db
    command: >
      sh -c "
        while ! nc -z epb-feature-flag-db 5432; do
          echo 'Postgres is unavailable - trying again in 1s...'
          sleep 1
        done
        sleep 1
        echo 'Starting Unleash...'
        yarn run start"

  epb-feature-flag-db:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/epbDatabase.Dockerfile
    environment:
      POSTGRES_PASSWORD: superSecret30CharacterPassword
      POSTGRES_USER: unleashed
    volumes:
      - feature-flag:/var/lib/postgresql@$POSTGRES_VERSION/data

  epb-data-warehouse:
    build:
      context: ${EPB_DATA_WAREHOUSE_PATH}
      dockerfile: ${PWD}/dataWarehouse.Dockerfile
    environment:
      DATABASE_URL: postgresql://epb:SecretWarehousePassword@epb-data-warehouse-db/epb?pool=50
      EPB_API_URL: http://epb-register-api
      EPB_QUEUES_URI: redis://epb-data-warehouse-queues
      EPB_AUTH_CLIENT_ID: 5e7b7607-971b-45a4-9155-cb4f6ea7e9f5
      EPB_AUTH_CLIENT_SECRET: data-warehouse-secret
      EPB_AUTH_SERVER: http://epb-auth-server/auth
      EPB_UNLEASH_URI: http://epb-feature-flag/api
      JWT_ISSUER: epb-auth-server
      JWT_SECRET: test-jwt-secret
      STAGE: development
    links:
      - epb-feature-flag
      - epb-data-warehouse-db
      - epb-data-warehouse-queues
    volumes:
      - ${EPB_DATA_WAREHOUSE_PATH}:/app

  epb-data-warehouse-db:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/epbDatabase.Dockerfile
    environment:
      POSTGRES_PASSWORD: SecretWarehousePassword
      POSTGRES_USER: epb
    volumes:
      - data-warehouse:/var/lib/postgresql@$POSTGRES_VERSION/data

  epb-data-warehouse-api:
    build:
      context: ${EPB_DATA_WAREHOUSE_PATH}
      dockerfile: ${PWD}/sinatra.Dockerfile
    environment:
      DATABASE_URL: postgresql://epb:SecretWarehousePassword@epb-data-warehouse-db/epb?pool=50
      JWT_ISSUER: epb-auth-server
      JWT_SECRET: test-jwt-secret
      STAGE: development
      APP_ENV: docker
      EPB_DATA_USER_CREDENTIAL_TABLE_NAME: user_credentials
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_ENDPOINT_URL_DYNAMODB: http://dynamodb-local:8000

    links:
      - epb-data-warehouse-db
    volumes:
      - ${EPB_DATA_WAREHOUSE_PATH}:/app

  epb-addressing-db:
    build:
      context: ${PWD}/
      dockerfile: ${PWD}/epbDatabase.Dockerfile
    environment:
      POSTGRES_PASSWORD: SecretAddressingPassword
      POSTGRES_USER: epb
    volumes:
      - addressing:/var/lib/postgresql@${POSTGRES_VERSION}/data

  epb-addressing:
    build:
      context: ${EPB_ADDRESSING_PATH}
      dockerfile: ${PWD}/sinatra.Dockerfile
    environment:
      DATABASE_URL: postgresql://epb:SecretAddressingPassword@epb-addressing-db/epb?pool=50
      JWT_ISSUER: epb-auth-server
      JWT_SECRET: test-jwt-secret
      STAGE: development
    links:
      - epb-addressing-db
    volumes:
      - ${EPB_ADDRESSING_PATH}:/app

  one-login-simulator:
    image: ghcr.io/govuk-one-login/simulator:25.05.13
    env_file:
      - .env.keys
    ports:
      - "3000:3000"
    environment:
      CLIENT_ID: datafrontendclientid
      SCOPES: openid,email
      REDIRECT_URLS: http://epb-data-frontend/login/callback,http://epb-data-frontend/login/callback/admin
      SIMULATOR_URL: http://one-login-simulator:3000

  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
    user: root
    image: "amazon/dynamodb-local:latest"
    ports:
      - "8000:8000"
    volumes:
      - dynamodb:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal

  dynamodb-bootstrap:
    image: amazon/aws-cli
    depends_on:
      - dynamodb-local
    environment:
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_REGION: eu-west-2
      EPB_DATA_USER_CREDENTIAL_TABLE_NAME: user_credentials
    entrypoint:
    - bash
    - -c
    - |
      echo "Waiting for DynamoDB Local...";
      until curl -s http://dynamodb-local:8000 > /dev/null; do sleep 1; done;
      echo "Creating table $$EPB_DATA_USER_CREDENTIAL_TABLE_NAME ...";

      aws dynamodb create-table \
        --table-name $$EPB_DATA_USER_CREDENTIAL_TABLE_NAME \
        --attribute-definitions AttributeName=UserId,AttributeType=S \
        --key-schema AttributeName=UserId,KeyType=HASH \
        --provisioned-throughput ReadCapacityUnits=20,WriteCapacityUnits=20 \
        --endpoint-url http://dynamodb-local:8000;
      echo "Done!"

volumes:
  feature-flag:
  register-api:
  auth-server:
  data-warehouse:
  dynamodb:
  addressing:
